[abc] : 각 문자 a, b ,c 하나에 대응함
만일 [ ] 안의 두 문자 사이에 하이픈(-)을 입력하면 두 문자 사이의 범위를 의미
[a-e] 라는 정규 표현식은 [abcde] 와 동일하며, [0-5]는 [012345] 와 동일함

[a-z] 는 알파벳 소문자
[A-Z]는 알파벳 대문자를 
[a-zA-Z]는 모든 알파벳을, [0-9]는 모든 숫자를 뜻함.
[ ]안의 ^은 반대를 뜻함.
[^0-9]는 숫자를 제외한 문자를,
[^abc]는 a, b, c를 제외한 모든 문자와 매치를 뜻함.

\d : 숫자와 매치, [0-9] 와 동일
\D : 숫자가 아닌것 매치, [^0-9] 와 동일
\s : whitespace(공백) 문자와 매치, [\t\n\r\f\v]와 동일
\S : whitespace 문자가 아닌 것과 매치, [^\t\n\r\f\v] 와 동일
\w : 문자 + 숫자와 매치, [a-zA-Z0-9]와 동일
\W : 문자 + 숫자가 아닌 문자와 매치 , [^a-zA-Z0-9]
대문자는 소문자의 반대

Dot(.)는 줄바꿈 문자인 \n을 제외한 모든 문자와 매치되며, Dot 하나당 임의의 한 문자를 나타냄.
정규표현식 a.e 는 'a+모든문자+e' 의 형태로써, a와 e 문자 사이에는 어떤문자가 들어가도 모두 매치가 됨

'abe' , 'ace', 'abate', 'ae' 와 정규식 a.e와 매치 여부
- 'abe', 'ace' : a와 e 사이에 b, c라는 문자가 있으므로 정규식과 매치
- 'abate', 'ae' : 매치되지 않음

*의 경우 * 바로 앞에 있는 문자가 0부터 무한대로 반복될 수 있다는 의미
ca*t 란  정규표현식은 c 다음의 a 가 0부터 무한대로 반복되고 t 로 끝난다는 의미
'ct' , 'cat', 'caat', 'caaaat' 모두 정규식과 매치됨.
+ 는 최소1번이상 반복될 때 사용
'ct'는 매치되지 않음.

메타문자 { } 를 사용하면 반복횟수를 고정할 수 있음.
{m, n}은 반복횟수가 m부터 n까지 고정됨
{3,} : 반복횟수가 3이상
{,3} : 반복횟수가 3이하

메타문자 { } 를 사용하면 반복횟수를 고정할 수 있음.
{m, n}은 반복횟수가 m부터 n까지 고정됨
{3,} : 반복횟수가 3이상
{,3} : 반복횟수가 3이하

메타문자 ? 는 {0,1} 과 동일
? 앞의 문자가 있어도 되고 없어도 된다는 의미

| : or 와 동일한 의미
expr1 | expr2 는 둘 중 하나의 형태만 만족해도 매치됨

^ : 문자열의 맨 처음과 일치함을 의미
^a 정규식은 a로 시작하는 단어와 매치됨

$ : ^와 반대의 의미로써, 문자열의 끝과 매치됨을 의미
a$는 a로 끝나는 단어와 매치됨

\ : 메타문자의 성질을 없앨때 붙임
^나 $ 문자를 메타문자가 아닌 문자 그 자체로 매치하고 싶은 경우 \^, \$ 의 형태로 사용

(): 괄호안의 문자열을 하나로 묶어 취급

정규 표현식과 관련된 메서드

- match() : 시작부부분부터 일치하는 패턴을 찾음.
- search() : 첫번째 일치하는 패턴을 찾음.
- findall() : 일치하는 모든 패턴을 찾음.
- finditer() : findall() 과 동일하지만 반복가능한 객체를 반환

